name: release

on:
  workflow_dispatch:
    logLevel:
      description: 'Log level'
      default: 'info'
    branches:
      - main
#  pull_request:
#    types:
#      - closed
#    branches:
#      - main

jobs:
  publish:
#    if: ${{ github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'release') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

#      - name: Build and publish laktory to pypi
#        run: make publish
#        env:
#          FLIT_INDEX_URL: ${{ vars.FLIT_INDEX_URL }}
#          FLIT_USERNAME: ${{ vars.FLIT_USERNAME }}
#          FLIT_PASSWORD: ${{ secrets.FLIT_PASSWORD }}
#          TWINE_REPOSITORY_URL: ${{ vars.TWINE_REPOSITORY_URL }}
#          TWINE_USERNAME: ${{ vars.TWINE_USERNAME }}
#          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}

  tag:
    permissions:
#      actions: write
#      checks: write
      contents: write  # required to push release tag
#      deployments: write
#      id-token: write
#      issues: write
#      discussions: write
#      packages: write
#      pages: write
#      pull-requests: write
    runs-on: ubuntu-latest
    needs: publish
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get version 0
        id: get_version
        run: |
          import os
          with open("./laktory/_version.py") as fp:
            version = fp.read().split("=")[-1].strip().replace('"', '')
          print(f'"version={version}" >> "$GITHUB_OUTPUT"')
        shell: python

      - name: View version
        run: echo ${{ steps.get_version.outputs.version }}

      - name: Get version
        run: echo "version=$(grep -oP "version = \'\K[^\']+" .laktory/_version.py)" >> $GITHUB_OUTPUT

      - name: View version
        run: echo ${{ steps.get_version.outputs.version }}

      - name: Set up Git
        run: git config --global user.email "actions@github.com" && git config --global user.name "GitHub Actions"

      - name: Create release tag
        run: git tag test-v${{ steps.get_version.outputs.version }}
#        run: git tag test_tag1

      - name: Push release tag
        run: git push origin test-v$GITHUB_OUTPUT
#        run: git push origin test_tag1


